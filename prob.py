import telebot
import os
import chromadb
from chromadb.config import Settings
from chromadb.utils.embedding_functions import SentenceTransformerEmbeddingFunction
from sentence_transformers import SentenceTransformer
from llama_index.llms.ollama import Ollama
from llama_index.core.llms import ChatMessage
from duckduckgo_search import DDGS
import requests
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from bs4 import BeautifulSoup
import time
import uuid  # ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = '7563626842:AAH02HKNgRO1WwUqCZnYNWC-K7kj80uO9Kw'
bot = telebot.TeleBot(TOKEN)

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChromaDB
chroma_storage_path = os.path.join(os.getcwd(), "chroma_db")
client = chromadb.PersistentClient(path=chroma_storage_path)

# ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ChromaDB
collection_name = "chat_data"
collection = client.get_or_create_collection(
    name=collection_name,
    embedding_function=SentenceTransformerEmbeddingFunction(model_name="all-MiniLM-L6-v2")
)

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ DuckDuckGo
def duckduckgo_search_safe(query, max_results=3, retries=3):
    results = []
    for attempt in range(retries):
        try:
            with DDGS() as ddgs:
                for r in ddgs.text(query, max_results=max_results):
                    if r.get("href"):
                        results.append(r["href"])
            return results
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ DuckDuckGo (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}): {str(e)}")
            time.sleep(5)
    return []

# ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
def fetch_page_content(url):
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        soup = BeautifulSoup(resp.text, "html.parser")
        paragraphs = soup.find_all("p")
        page_text = " ".join([p.get_text() for p in paragraphs])
        return page_text.strip()
    except Exception:
        return ""

# ‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
def truncate_text(text, max_words=500):
    words = text.split()
    if len(words) <= max_words:
        return text
    truncated_text = " ".join(words[:max_words])
    last_period_index = truncated_text.rfind(".")
    if last_period_index != -1:
        truncated_text = truncated_text[:last_period_index + 1]
    return truncated_text

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Ollama –∏ DuckDuckGo. –ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å!\n"
        "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ /history - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã\n"
        "üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç, –∏ —è –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—é."
    )

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history (–ø–æ–∫–∞–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∑–∞–ø–∏—Å–µ–π –∏–∑ ChromaDB)
@bot.message_handler(commands=['history'])
def show_history(message):
    try:
        results = collection.get()
        if "documents" not in results or len(results["documents"]) == 0:
            bot.send_message(message.chat.id, "üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return

        history_messages = []
        for i, doc in enumerate(results["documents"][-5:]):  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
            history_messages.append(f"üîπ {i+1}: {doc[:300]}...")  # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        
        bot.send_message(message.chat.id, "üìú –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã:\n\n" + "\n\n".join(history_messages))

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@bot.message_handler(content_types=['document'])
def handle_document(message):
    try:
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        save_path = os.path.join("downloads", message.document.file_name)
        os.makedirs("downloads", exist_ok=True)

        with open(save_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        bot.send_message(message.chat.id, f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç '{message.document.file_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_input = message.text
    user_id = str(message.chat.id)

    # ‚úÖ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ DuckDuckGo
    urls = duckduckgo_search_safe(user_input, max_results=3)
    bot.send_message(message.chat.id, f"üîé –ù–∞–π–¥–µ–Ω–æ {len(urls)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∏–∑–≤–ª–µ–∫–∞—é —Ç–µ–∫—Å—Ç...")

    context = ""
    for url in urls:
        page_text = fetch_page_content(url)
        truncated_text = truncate_text(page_text, max_words=500)
        if len(truncated_text.strip()) > 30:
            context += f"\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {url}\n{truncated_text}\n"

    # ‚úÖ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è Ollama
    messages = []
    if context:
        messages.append(ChatMessage(role="user", content=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}"))

    messages.append(ChatMessage(role="user", content=user_input))

    # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama
    llm = Ollama(model="llama3.2", request_timeout=120.0)
    bot.send_message(message.chat.id, "ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

    try:
        response_stream = llm.stream_chat(messages=messages)
        response = ""
        for chunk in response_stream:
            response += chunk.delta

        bot.send_message(message.chat.id, response)

        # ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ ChromaDB
        doc_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
        collection.add(
            ids=[doc_id],
            documents=[f"üîπ –ó–∞–ø—Ä–æ—Å: {user_input}\nüîπ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\nüîπ –û—Ç–≤–µ—Ç: {response}"],
            metadatas=[{"user_id": user_id, "query": user_input}]
        )
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ChromaDB (ID: {doc_id})")

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
